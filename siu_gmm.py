import numpy as np
import cv2
import os
import time
from sklearn.mixture import GaussianMixture
from joblib import Parallel, delayed

# **GMM ile anomaly map Ã§Ä±karma fonksiyonu**
def generate_anomaly_map(image, num_components=3):
    pixels = image.reshape(-1, 1)  # Piksel deÄŸerlerini vektÃ¶rize et
    
    gmm = GaussianMixture(n_components=num_components, covariance_type="full", random_state=42)
    gmm.fit(pixels)

    scores = gmm.score_samples(pixels)
    scores = scores.reshape(image.shape)

    threshold = np.percentile(scores, 5)  # En dÃ¼ÅŸÃ¼k 5%'lik pikseller anomali
    anomaly_map = (scores < threshold).astype(np.uint8)

    return anomaly_map

# **Paralel Ã§alÄ±ÅŸacak fonksiyon**
def process_image(image_path, output_dir):
    image = cv2.imread(image_path, 0)  # Grayscale olarak yÃ¼kle
    if image is None:
        print(f"Hata: {image_path} okunamadÄ±!")
        return None
    
    anomaly_map = generate_anomaly_map(image)

    # **Kaydet**
    filename = os.path.basename(image_path).split('.')[0] + "_anomaly.npy"
    np.save(os.path.join(output_dir, filename), anomaly_map)

    return filename  # Ä°ÅŸlenen dosya ismini dÃ¶ndÃ¼r

# **Ana Ã§alÄ±ÅŸma fonksiyonu**
def process_all_images(input_dir, output_dir, num_workers=4):
    start_time = time.time()
    
    # **TÃ¼m dosyalarÄ± al (PNG ve JPG desteÄŸi)**
    image_files = [
        os.path.join(input_dir, f) for f in os.listdir(input_dir) 
        if f.lower().endswith((".jpg", ".jpeg", ".png"))
    ]

    print(f"{len(image_files)} gÃ¶rÃ¼ntÃ¼ iÅŸleniyor...")

    # **Joblib ile paralel iÅŸleme**
    results = Parallel(n_jobs=num_workers)(
        delayed(process_image)(image_path, output_dir) for image_path in image_files
    )

    end_time = time.time()
    print(f"TamamlandÄ±! Toplam sÃ¼re: {end_time - start_time:.2f} saniye")

# **KullanÄ±m**
input_directory = "./tryy/"  # ðŸ“‚ BT gÃ¶rÃ¼ntÃ¼lerinin olduÄŸu klasÃ¶r
output_directory = "./try/"  # ðŸ“‚ Ã‡Ä±ktÄ±larÄ±n kaydedileceÄŸi klasÃ¶r
os.makedirs(output_directory, exist_ok=True)

process_all_images(input_directory, output_directory, num_workers=8)  # Ä°ÅŸlemci Ã§ekirdek sayÄ±sÄ±na gÃ¶re ayarla
